//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
    public:
    
    int m(int arr[],int s,int e,int n){
        
	    while(s<=e){
	        int mid=(s+e)/2;
        int next=(mid+1)%n;
        int prev=(mid-1)%n;
        
        if(arr[mid]<=arr[next] and arr[mid]<=arr[prev])
           return mid;
        else if(arr[mid]>=arr[0])
           s=mid+1;
        else if(arr[mid]<=arr[n-1])
           e=mid-1;
	        
	    }
	    //for strictly increasing array(i.e if array is not rotated)
	    
	    if(s==n)
	      return 0;
    }
    
    int bs(int arr[],int l,int h,int key){
        while(l<=h){
            int mid=(l+h)/2;
            if(arr[mid]==key)
              return mid;
            else if (arr[mid]>key)
              h=mid-1;
            else
              l=mid+1;
            
        }
        return -1;
    }
    int search(int A[], int l, int h, int key){
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        
        //complete the function here
        
        
        //finding min element's index first
        int mini=m(A,l,h,h+1);
        
        //now this min element divides the array into two sorted array
        //do binary search on both of them to find the key element
        
        int a=bs(A,l,mini-1,key);
        int b=bs(A,mini,h,key);
        if(a==-1)
          return b;
        else
          return a;
    }
};

//{ Driver Code Starts. 
int main() {
    int t;
    cin >> t;
    while(t--){
        int n;
        cin >> n;
        int A[n];
        for(int i = 0; i < n; i++)
            cin >> A[i];
        int key;
        cin >> key;
        Solution ob;
        cout << ob.search(A, 0, n - 1, key) << endl;
    }
return 0;
}
// } Driver Code Ends
