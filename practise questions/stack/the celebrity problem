brute force O(n2)
1. checking for the column that has no. of ones=n-1 ( evrybody knows him)
2. he knows no one, therefore its row would be all zero.
 
 
 class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        int arr[n]={0};
        int sum=0,k=0,maxi=0;
        for(int j=0;j<n;j++){
            sum=0;
            for(int i=0;i<n;i++){
                sum+=M[i][j];
            }
            if(maxi<sum){
                maxi=sum;
                k=j;
            }
        }
        int i=0;
        for( i=0;i<n;i++)
           {
               if(M[k][i]==0)
                 continue;
               else
                 break;
           }
           if(i==n and maxi!=0 and maxi==n-1)
             return k;
           else
             return -1;
    }
};





another method

using stack

O(n)


bool knows(int a, int b,vector<vector<int> >& M){
        if(M[a][b]==1)
           return true;
        else
           return false;
        
    }
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int> s;
        for(int i=0;i<n;i++)
           s.push(i);
           
        int a,b;
        while(s.size()!=1){
            a=s.top();
            s.pop();
            b=s.top();
            s.pop();
            if(knows(a,b,M))
               s.push(b);
            else if(knows(b,a,M))
               s.push(a);
        }
        //our potential candidate
        int c=s.top();
        
        int row=0,col=0;
        
        for(int i=0;i<n;i++){
            if(M[c][i]==0)
              row++;
            
            if(M[i][c]==1)
              col++;
        }
           
        if(row==n and col==n-1)
           return c;
        else
           return -1;
           
           
    }
};





